module.exports = /* eslint-disable */ [{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction    EyeIcon() {\r\n  // Attribution: Fabi√°n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default EyeIcon;\r\n","examples":[{"name":"Example","description":"SVG Eye Icon","code":"import React from 'react';\r\nimport EyeIcon from 'ps-react/EyeIcon'\r\n/** SVG Eye Icon */\r\n\r\nexport default function Example(){\r\n    return  (<EyeIcon></EyeIcon>)\r\n}"}]},{"name":"HelloWorld","description":"A super lame  component that says hello with a custom message","props":{"message":{"type":{"name":"string"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\n/** A super lame  component that says hello with a custom message */\r\nfunction HelloWorld({ message }) {\r\n    return <div>Hello {message}</div>\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n    /**Message to Display */ \r\n    message: propTypes.string\r\n}\r\nexport default HelloWorld;","examples":[{"name":"ExampleHelloWorld","description":"Custom message","code":"import React from 'react';\r\nimport HelloWorld from 'ps-react/HelloWorld';\r\n\r\n/** Custom message */\r\nexport default function ExampleHelloWorld() {\r\n  return <HelloWorld message=\"Pluralsight viewers!\" />\r\n}\r\n"}]},{"name":"Label","description":"","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML Id asccociated for input"},"label":{"type":{"name":"string"},"required":true,"description":"Label Text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from 'react';\r\nimport propTypes from 'prop-types'\r\nfunction Label({ required, htmlFor, label }) {\r\n\r\n    return (\r\n        <label htmlFor={htmlFor} style={{ display: 'block' }}>\r\n            {label}   {required && <span style={{ color: 'red' }}>*</span>}\r\n        </label>\r\n    )\r\n\r\n}\r\n\r\nexport default Label;\r\nLabel.propTypes = {\r\n    /** HTML Id asccociated for input */\r\n    htmlFor: propTypes.string.isRequired,\r\n    /** Label Text */\r\n    label: propTypes.string.isRequired,\r\n    /** Display asterisk after label if true */\r\n    required: propTypes.bool\r\n}","examples":[{"name":"ExampleOption","description":"","code":"import React from 'react';\r\nimport Label from 'ps-react/Label';\r\n\r\nexport default function ExampleOptional() {\r\n    return <Label htmlFor=\"test\" label=\"test\"></Label>\r\n}"},{"name":"ExampleRequired","description":"","code":"import React from 'react';\r\nimport Label from 'ps-react/Label';\r\n\r\nexport default function ExampleRequired() {\r\n    return (<Label htmlFor=\"test\" label=\"test\" required ></Label>)\r\n}"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    }\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? 'text' : 'password'}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}>\r\n        {\r\n          showVisibilityToggle &&\r\n          <a\r\n            href=\"\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}>\r\n            <EyeIcon />\r\n          </a>\r\n        }\r\n        {\r\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n        }\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password'\r\n};\r\n\r\nexport default PasswordInput;\r\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from 'react';\r\nimport PasswordInput from 'ps-react/PasswordInput';\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      password: '' \r\n    };\r\n  }\r\n\r\n  getQuality() {\r\n    const length = this.state.password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <PasswordInput\r\n          htmlId=\"password-input-example-all-features\"\r\n          name=\"password\"\r\n          onChange={ event => this.setState({ password: event.target.value })}\r\n          value={this.state.password}\r\n          minLength={8}\r\n          placeholder=\"Enter password\"\r\n          showVisibilityToggle\r\n          quality={this.getQuality()}\r\n          {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react';\r\nimport propTypes from 'prop-types'\r\nclass ProgressBar extends React.Component {\r\n\r\n    getColor = () => {\r\n        if (this.props.percent === 100) return 'green';\r\n        return this.props.percent > 50 ? 'green' : 'red';\r\n    }\r\n\r\n    getWidthAsPercentOfTotalWidth = () => {\r\n        return parseInt(this.props.width * (this.props.percent/100), 10);\r\n    }\r\n\r\n    render() {\r\n        debugger;\r\n        const { percent, width, height } = this.props;\r\n        return (\r\n            <div style={{ boder: 'solid 1px lightgray', width: width }}>\r\n                <div style={{\r\n                    width: this.getWidthAsPercentOfTotalWidth(),\r\n                    height,\r\n                    backgroundColor: this.getColor(percent)\r\n                }} /></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProgressBar;\r\n\r\nProgressBar.propTypes = {\r\n    /** percent of progress completed */\r\n    percent: propTypes.number.isRequired,\r\n    /** Bar width */\r\n    width: propTypes.number.isRequired,\r\n    /** Bar height */\r\n    height: propTypes.number\r\n};\r\nProgressBar.defaultProps = {\r\n    height: 5\r\n};","examples":[{"name":"Example100Percent","description":"100% Progress bar","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 100% Progress bar */\r\n\r\nexport default function Example100Percent() {\r\n    return (\r\n        <ProgressBar percent={100} width={150} height={20}></ProgressBar>\r\n    )\r\n}"},{"name":"Example10Percent","description":"10% Progress bar","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/**  10% Progress bar */\r\n\r\nexport default function Example10Percent() {\r\n    return (\r\n        <ProgressBar percent={10} width={150}></ProgressBar>\r\n    )\r\n}"},{"name":"Example70Percent","description":"70% Progress bar","code":"import React from 'react'\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 70% Progress bar */\r\n\r\nexport default function Example70Percent() {\r\n    return (\r\n        <ProgressBar percent={70} width={150}></ProgressBar>\r\n    )\r\n}"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\r\n    return (\r\n        <div style={{ marginBottom: 16 }}>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                style={error && { border: 'solid 1px red' }}\r\n                {...props}\r\n                 />\r\n            {children}\r\n            {error && <div className=\"error\" style={{ color: 'red' }}>{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInput.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: propTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: propTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: propTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: propTypes.oneOf(['text', 'number', 'password']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: propTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: propTypes.func.isRequired,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: propTypes.string,\r\n\r\n    /** Value */\r\n    value: propTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: propTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: propTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","examples":[{"name":"ExampleOptional","description":"Optional TextBox","code":"import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n       />\r\n    )\r\n  }\r\n}"},{"name":"ExampleOptionalError","description":"Optional TextBox","code":"import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => { }}\r\n        required\r\n        error=\"first name is required\"\r\n      />\r\n    )\r\n  }\r\n}"}]},{"name":"TextInputBEM","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({ htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props }) {\r\n    return (\r\n        <div className='textinput'>\r\n            <Label htmlFor={htmlId} label={label} required={required} />\r\n            <input\r\n                id={htmlId}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                className={error && 'textinput__input--state-error'}\r\n                {...props}\r\n            />\r\n            {children}\r\n            {error && <div className=\"textinput__error\" >{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInput.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: propTypes.string.isRequired,\r\n\r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: propTypes.string.isRequired,\r\n\r\n    /** Input label */\r\n    label: propTypes.string.isRequired,\r\n\r\n    /** Input type */\r\n    type: propTypes.oneOf(['text', 'number', 'password']),\r\n\r\n    /** Mark label with asterisk if set to true */\r\n    required: propTypes.bool,\r\n\r\n    /** Function to call onChange */\r\n    onChange: propTypes.func.isRequired,\r\n\r\n    /** Placeholder to display when empty */\r\n    placeholder: propTypes.string,\r\n\r\n    /** Value */\r\n    value: propTypes.any,\r\n\r\n    /** String to display when error occurs */\r\n    error: propTypes.string,\r\n\r\n    /** Child component to display next to the input */\r\n    children: propTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","examples":[{"name":"ExampleError","description":"example required textbox","code":"import React from 'react';\r\nimport TextInputBEM from 'ps-react/TextInputBEM';\r\n/** example required textbox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInputBEM\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => { }}\r\n        required\r\n        error=\"first name is required\"\r\n      />\r\n    )\r\n  }\r\n}"}]}]